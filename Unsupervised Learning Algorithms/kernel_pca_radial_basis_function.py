# -*- coding: utf-8 -*-
"""Kernel PCA - Radial Basis Function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1trYvu6Wy4a9HC67uF56lfKRO-NMwoJQP
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df=pd.read_csv('Dataset.csv', sep=',',header=None)

# X is a numpy array containing the 1000 datapoints
X = df.values
X = np.transpose(X)

# Radial Basis Function
def radial_basis_kernel(x_i, x_j, sigma):
  return np.exp(-((np.linalg.norm(x_i-x_j))**2)/(2*(sigma**2)))

no_of_components = 2
sigma = 1

# Kernel Matrix K
K = np.zeros((1000, 1000))

# Need to fill up the K matrix
for i in range(1000):
  for j in range(1000):
    K[i][j] = radial_basis_kernel(X[:, i], X[:, j], sigma)

# Need to center the K matrix
N = K.shape[0]
one_n = np.ones((N,N)) / N
K_c = K - one_n.dot(K) - K.dot(one_n) + one_n.dot(K).dot(one_n)

# Eigen Decomposition of K_c
eigen_values, eigen_vectors = np.linalg.eigh(K_c)

# Top two components
components = np.column_stack((eigen_vectors[:,-i] for i in range(1,no_of_components+1)))

plt.figure(figsize=(8,6))
plt.scatter(components[:, 0], components[:, 1], color='blue', alpha=0.5)
plt.title('Top two components after Radial Basis Kernel(sigma=1) PCA')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.show()