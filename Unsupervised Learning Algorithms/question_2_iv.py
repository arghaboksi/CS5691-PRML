# -*- coding: utf-8 -*-
"""Question_2_iv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lkx2hzKFLSMKaMjRSf-bV9jy4uIg_tPL
"""

import numpy as np
import scipy.sparse.linalg
import matplotlib.pyplot as plt
import pandas as pd

# Dataset
df=pd.read_csv('Dataset.csv', sep=',',header=None)
X = df.values
X = np.transpose(X)

# Calculation of the Kernel Matrix using Polynomial Kernel
def polynomial_kernel(x_i, x_j, d):
  return (1 + np.dot(x_i, x_j))**d

degree = 4
K = np.zeros((1000, 1000))
for i in range(1000):
  for j in range(1000):
    K[i][j] = polynomial_kernel(X[:, i], X[:, j], degree)
#print(np.shape(K))


# Calculation of the Kernel Matrix using RBF Kernel
def radial_basis_kernel(x_i, x_j, sigma):
  return np.exp(-((np.linalg.norm(x_i-x_j))**2)/(2*(sigma**2)))

sigma = 0.7
K = np.zeros((1000, 1000))
for i in range(1000):
  for j in range(1000):
    K[i][j] = radial_basis_kernel(X[:, i], X[:, j], sigma)
#print(np.shape(K))

# Eigen decomposition of K
vals, vec = scipy.sparse.linalg.eigsh(K,k=4,which='LM')
#print(vals)
labels = np.zeros(np.shape(vec)[0])
for i in range(np.shape(vec)[0]):
  labels[i] = np.argmax(vec[i])

X = np.transpose(X)
x = X[:, 0]
y = X[:, 1]
plt.scatter(x, y, c=labels)
plt.title('Results with RBF Kernel(sigma = 0.7)')