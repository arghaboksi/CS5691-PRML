# -*- coding: utf-8 -*-
"""Kernel PCA - Polynomial Kernel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1av1iWPOqPTRuAeemb9Cn8HONyfJlcUnR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df=pd.read_csv('Dataset.csv', sep=',',header=None)

# X is a numpy array containing the 1000 datapoints
X = df.values
X = np.transpose(X)

# Polynomial Kernel of degree d
def polynomial_kernel(x_i, x_j, d):
  return (1 + np.dot(x_i, x_j))**d

degree = 2
no_of_components = 2

# Kernel Matrix K
K = np.zeros((1000, 1000))

# Need to fill up the K matrix
for i in range(1000):
  for j in range(1000):
    K[i][j] = polynomial_kernel(X[:, i], X[:, j], degree)

# Need to center the K matrix
N = K.shape[0]
one_n = np.ones((N,N)) / N
K_c = K - one_n.dot(K) - K.dot(one_n) + one_n.dot(K).dot(one_n)

# Eigen Decomposition of K_c
eigen_values, eigen_vectors = np.linalg.eigh(K_c)

# Top two components
components = np.column_stack((eigen_vectors[:,-i] for i in range(1,no_of_components+1)))

plt.figure(figsize=(8,6))
plt.scatter(components[:, 0], components[:, 1], color='blue', alpha=0.5)
plt.title('Top two components after Polynomial Kernel(degree=3) PCA')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.show()