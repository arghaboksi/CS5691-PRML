# -*- coding: utf-8 -*-
"""PCA Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17hUNjSr-GbA0p_-UFesz5YTN-fVrPJMG
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go

df=pd.read_csv('Dataset.csv', sep=',',header=None)

# X is a numpy array containing the 1000 datapoints
X = df.values
print(np.shape(X))

# Plotting the 2-D datapoints
fig = go.Figure(data=[go.Scatter(x = X[:, 0], y = X[:,1], mode='markers', marker=dict(size=8, opacity=0.5), name='data')])
fig.update_layout(xaxis_title="x", yaxis_title="y", yaxis =dict(scaleanchor = "x", scaleratio = 1))
fig.show()

# Centering the dataset
X_centered = X - np.mean(X, axis = 0)

# Plotting the Centered 2-D datapoints
fig = go.Figure(data=[go.Scatter(x = X_centered[:, 0], y = X_centered[:,1], mode='markers', marker=dict(size=8, opacity=0.5), name='data')])
fig.update_layout(xaxis_title="x_centered", yaxis_title="y_centered", yaxis =dict(scaleanchor = "x", scaleratio = 1))
fig.show()

# Covariance matrix for centered data
covariance_matrix = np.cov(X_centered, rowvar= False)
print("Covariance Matrix = \n", covariance_matrix)

# Eigenvalues and Eigenvectors of the covariance matrix
eigen_values, eigen_vectors = np.linalg.eigh(covariance_matrix)
print("Eigenvalues : \n", eigen_values)
print("Eigenvectors : \n", eigen_vectors)

# W1 corresponds to the largest eigen value and W2 corresponds to the second largest eigen value